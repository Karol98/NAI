#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <iostream>
#include <cstdlib>

using namespace cv;
using namespace std;
void MyLine( Mat img, Point start, Point end )
{
  int thickness = 2;
  int lineType = LINE_8;
  line( img,
    start,
    end,
    Scalar( 0, 0, 0 ),
    thickness,
    lineType );
}

int main( int argc, char** argv ) {
    bool capturing = true;
    bool obroc = false;
    bool linia = false;
    VideoCapture cap(0);
    if ( !cap.isOpened() ) {
        cerr << "error opening frames source" << endl;
        return -1;
    }
    cout << "Video size: " << cap.get( CAP_PROP_FRAME_WIDTH ) 
    << "x" << cap.get( CAP_PROP_FRAME_HEIGHT ) << endl;

    int loRange[3] = {0,70,122};
    int hiRange[3] = {255,255,255};

    namedWindow("oknoHSV",WINDOW_AUTOSIZE);
    namedWindow("HSVconfig",WINDOW_AUTOSIZE);
    namedWindow("contours",WINDOW_AUTOSIZE);
    //namedWindow("Camera",WINDOW_AUTOSIZE);
    createTrackbar("h - min","HSVconfig",&(loRange[0]),255);
    createTrackbar("s - min","HSVconfig",&(loRange[1]),255);
    createTrackbar("v - min","HSVconfig",&(loRange[2]),255);
    createTrackbar("h - max","HSVconfig",&(hiRange[0]),255);
    createTrackbar("s - max","HSVconfig",&(hiRange[1]),255);
    createTrackbar("v - max","HSVconfig",&(hiRange[2]),255);

    do {
        Mat frame,frame2;
        //flip(frame2,frame2,1);
        //imshow("Camera",frame2);
        int dilation_size = 5;
        auto structElem = getStructuringElement(MORPH_ELLIPSE,
                                        Size( 2*dilation_size + 1, 2*dilation_size+1),
                                        Point( dilation_size, dilation_size));

        if ( cap.read( frame ) ) { 
            
            flip(frame,frame,1);
            cvtColor(frame, frame2, COLOR_BGR2HSV);
            inRange(frame2,Scalar(loRange[0],loRange[1],loRange[2]),
            Scalar(hiRange[0],hiRange[1],hiRange[2]),frame2);
            morphologyEx(frame2, frame2, MORPH_CLOSE, structElem);
            morphologyEx(frame2, frame2, MORPH_OPEN, structElem);
            imshow( "oknoHSV", frame2 );

            vector<vector<Point>> contours;
            findContours(frame2,contours,RETR_LIST,CHAIN_APPROX_TC89_KCOS);
            sort(contours.begin(), contours.end(),
                [](auto &a, auto &b) {
                    return contourArea(a,false) > contourArea(b,false);
                });
            for(int i = 0 ; i < contours.size(); i++) {
                if(contourArea( contours.at(i), false )>2000) {
                approxPolyDP(contours.at(i),contours.at(i),20,true);
                drawContours(frame,contours,i,{0,0,255,255});
                auto txtpos = contours.at(i).at(0);
              //  putText(frame,to_string(contours.at(i).size()),txtpos,FONT_HERSHEY_PLAIN,2,{0,0,255,255});
                txtpos.y += 30;
              //  putText(frame,to_string(contourArea( contours.at(i), false )),txtpos,FONT_HERSHEY_PLAIN,2,{0,0,255,255});
                txtpos.y -= 60;
               // putText(frame, to_string(i), txtpos, FONT_HERSHEY_PLAIN, 2, {0,0,255,255});
                }
                if(contours.size() > 1) {
                    Point avg;
                    Point avg1;
                    Rect r = boundingRect(contours.at(0));
                    Rect r1 = boundingRect(contours.at(1));
                    avg.x = r.x+r.width/2;
                    avg.y = r.y+r.height/2;
                    avg1.x = r1.x + r1.width/2;
                    avg1.y = r1.y + r1.height/2;
                    putText(frame,"X",avg, FONT_HERSHEY_PLAIN, 2, {0, 255, 255, 255});
                    putText(frame,"X",avg1, FONT_HERSHEY_PLAIN, 2, {0, 255, 255, 255});
                    int liczba = abs(avg.y - avg1.y);
                    if(liczba<20) {
                        linia = true;
                    }
                    if(linia) {
                    MyLine(frame,avg,avg1);
                    }
                }
                    imshow("contours",frame);
                }
                 
               
        } else {
            // stream finished
            capturing = false;
        }
        char key = waitKey( 1000.0/60.0 )&0x0ff;
        //czekaj na klawisz, sprawdz czy to jest 'esc'
        if( key == 27) {
            break;
        }
    } while( capturing );
    return 0;
}
